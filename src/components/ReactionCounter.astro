---
type Props = {
  title: string;
  num_of_like: number;
  num_of_fire: number;
  num_of_thumb: number;
  num_of_rocket: number;
  slug: string;
}

const { title, num_of_like, num_of_fire, num_of_thumb, num_of_rocket, slug} = Astro.props;
const emojiMap: {[index: string]: any} = {
  like: '👍🏿',
  fire: '❤️‍🔥',
  thumb: '👎🏿',
  rocket: '🚀'
};
const reactions = ['like', 'fire', 'thumb', 'rocket'];
---
<!-- {
  reactions.map(reaction => (
  
  <button data-reaction={reaction} data-slug={slug} id="reaction-btn" class="reaction-btn" data-title={title}>
    <div id="reaction-span">{num_of_like}</div>
    <span>{emojiMap[reaction]}</span>
  </button>
  ))
} -->
<button data-reaction={reactions[0]} data-slug={slug} id="reaction-btn" class="reaction-btn" data-title={title}>
  <div id="reaction-span">{num_of_like}</div>
  <span>{emojiMap.like}</span>
</button>
<button data-reaction={reactions[1]} data-slug={slug} id="reaction-btn" class="reaction-btn" data-title={title}>
  <div id="reaction-span">{num_of_fire}</div>
  <span>{emojiMap.fire}</span>
</button>
<button data-reaction={reactions[2]} data-slug={slug} id="reaction-btn" class="reaction-btn" data-title={title}>
  <div id="reaction-span">{num_of_thumb}</div>
  <span>{emojiMap.thumb}</span>
</button>
<button data-reaction={reactions[3]} data-slug={slug} id="reaction-btn" class="reaction-btn" data-title={title}>
  <div id="reaction-span">{num_of_rocket}</div>
  <span>{emojiMap.rocket}</span>
</button>


<script>
  // const reactionBtn = document.querySelector('#reaction-btn') as HTMLButtonElement;
  // const reactionSpan = document.querySelector('#reaction-span') as HTMLButtonElement;

  // const reactionBtnAb = document.querySelector('#reaction-btn-ab') as HTMLButtonElement;
  // const reactionSpanAb = document.querySelector('#reaction-span-ab') as HTMLButtonElement;
  // const title = reactionBtn.dataset.title as string;
  

  //  // decide whether or not it’s disabled on page load
  //  window.addEventListener("DOMContentLoaded", () => {
  //   const isLiked = localStorage.getItem(title);
  //   if (isLiked) {
  //     reactionBtn.disabled = true;
  //     reactionBtnAb.disabled = true;
  //   }
  // });

  // reactionBtn.addEventListener("click", async () => {
  //   reactionBtn.disabled = true;
  //   //@ts-ignore
  //   reactionSpan.textContent = (++reactionSpan.textContent).toString();
  //   try{
  //     const req = await fetch("/api/addReaction", {
  //       method: "POST",
  //       headers: {
  //         "Content-Type": "application/json",
  //       },
  //       body: JSON.stringify({
  //         title,
  //       }),
  //     });
  //     localStorage.setItem(title, "true");
  //     console.log(title);
  //   }catch(e){
  //     console.error(e);
  //     alert("Ya la cagaste");
  //   }
  
  // })

  // reactionBtnAb.addEventListener("click", async () => {
  //   reactionBtnAb.setAttribute('style', 'color:red');
  //   //@ts-ignore
  //   reactionSpanAb.textContent = (++reactionSpanAb.textContent).toString();
  //   try{
  //     const req = await fetch("/api/addReaction", {
  //       method: "POST",
  //       headers: {
  //         "Content-Type": "application/json",
  //       },
  //       body: JSON.stringify({
  //         title,
  //       }),
  //     });
  //     localStorage.setItem(title, "true");
  //     console.log(title);
  //   }catch(e){
  //     console.error(e);
  //     alert("Ya la cagaste");
  //   }
  
  // })

</script>